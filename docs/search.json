[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website was created as a project for the course “DS 002R: Foundations of Data Science, R” at Pomona College.\nIn the Tab “Data Visualization”, there are two visualizations created using R, with data sourced from the TidyTuesday data repository. The TidyTuesday Project is a collection of data frames, released every week from 2018 to present day. The data collected in these frames are endless, with data quantifying Olympic Medals to data describing Himalayan Climbers. The project is open to anyone and everyone, and it aims to provide opportunities for individuals to learn how to work with real-world data sets through data science."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Felicia Akinde",
    "section": "",
    "text": "Felicia Akinde is a student (CO ’27) at Pomona College in Claremont, California. She is majoring in neuroscience, with minors in data science and French. Originally from Chicago, Illinois, she enjoys playing her guitar, drawing, and hanging out with friends when she isn’t soaking up the sunny California rays. One of her favorite food combinations is coffee and cheese, which inspired the data used on this website. Click on “About” to learn more!"
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Option 1: tidytuesdayR package\ninstall.packages(“tidytuesdayR”)\ntuesdata &lt;- tidytuesdayR::tt_load(2024, week = 20)\ncoffee_survey &lt;- tuesdata$coffee_survey"
  },
  {
    "objectID": "coffee_survey.html",
    "href": "coffee_survey.html",
    "title": "Coffee Survey",
    "section": "",
    "text": "library(tidytuesdayR)\nlibrary(tidyverse)\n\n# imports data from tidytuesday\ntuesdata &lt;- tidytuesdayR::tt_load(2024, week = 20)\n\n# renames data\ncoffee_survey &lt;- tuesdata$coffee_survey\n\n# removes NAs from variables age and favorite\ncleaned_coffee_survey &lt;- coffee_survey |&gt;\n  filter(!is.na(age) & !is.na(favorite))\n\n# creates a new data frame with age and favorite, counts the occurences of each favorite per age group\ndata_summary &lt;- cleaned_coffee_survey |&gt;\n  group_by(age, favorite) |&gt;\n  summarize(count = n(), .groups = 'drop')\n\n# creates proportion, which is the percentage of favorite in age \ncoffee_survey3 &lt;- data_summary |&gt;\n  group_by(age)  |&gt;\n  mutate(proportion = count / sum(count, na.rm = TRUE))\n\n# makes graph\nggplot(coffee_survey3, \n       aes(x = favorite, y = proportion, fill = favorite)) +\n  geom_bar(stat = \"identity\") + \n  facet_wrap(~ age) +\n    \n  scale_y_continuous(\n    labels = scales::percent) +\n  labs(\n    x = \"Favorite Way to Drink Coffee\",\n    y = \"Percentage\",\n    title = \"Favorite Ways to Drink Coffee Across Different Age Groups\",\n  )+\n  theme(\n    axis.text.x = element_blank(),\n  )"
  },
  {
    "objectID": "cheese.html",
    "href": "cheese.html",
    "title": "Cheese",
    "section": "",
    "text": "Data Source:\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(dplyr)\n\n# imports data from tidytuesday\ntuesdata &lt;- tidytuesdayR::tt_load(2024, week = 23)\n\n# renames data\ncheeses &lt;- tuesdata$cheeses\n\n# removes \"mg/100g\" from end of calcium_content\ncheeses$calcium_content &lt;- str_sub(cheeses$calcium_content, end = -8)\n\n# turns calcium_content from a string into a number\ncheeses$calcium_content &lt;- as.numeric(cheeses$calcium_content)\n\n# creates a new data point if there is more than one animal in milk\ncheeses_separated &lt;- cheeses |&gt;\n  separate_rows(milk, sep = \", \") \n\n# takes NAs out of milk and calcium content\ncleaned_cheeses &lt;- cheeses_separated |&gt;\n  filter(!is.na(milk) & !is.na(calcium_content)) |&gt;\n  # creates ranges for calcium_content & assigns them appropriate labels\n  mutate(calcium_range = cut(calcium_content,\n                         breaks = c(0, 50, 100, 200, 500, 1000, 5000),\n                         labels = c(\"0-50\", \"50-100\", \"100-200\", \"200-500\", \"500-1000\", \"1000-5000\")\n                         ))\n\n# assigns each range to a color \ncolors &lt;- c(\"0-50\" = \"#CDC754\",  \n            \"50-100\" = \"#80CD54\",\n            \"100-200\" = \"#54CD8D\",\n            \"200-500\" = \"#54C2CD\",  \n            \"500-1000\" = \"#7588F4\",\n            \"1000-5000\" = \"#2D34A7\") \n\n# makes plot\nggplot(cleaned_cheeses, aes(x = milk, y = color, fill = calcium_range)) +\n  geom_tile() +\n  scale_fill_manual(values = colors) +\n  labs(\n    x = \"Type of Milk\",\n    y = \"Color\",\n    title = \"Calcium Content by Type of Milk and Cheese Color\",\n    fill = \"Calcium Content (mg/100g)\"\n  )"
  },
  {
    "objectID": "project2.html",
    "href": "project2.html",
    "title": "Mini-Project 2",
    "section": "",
    "text": "library(tidyverse)\n\ntuesdata &lt;- tidytuesdayR::tt_load(2024, week = 31)\n\nsummer_movie_genres &lt;- tuesdata$summer_movie_genres\nsummer_movies &lt;- tuesdata$summer_movies\n\n\n#\nsummer_movies_digi &lt;- summer_movies |&gt;\n  filter(str_detect(simple_title, \"\\\\d\")) |&gt;\n  select(primary_title, year, genres, simple_title, average_rating)\n\nsummer_movies_of_digi &lt;- summer_movies_digi |&gt;\n  filter(str_detect(simple_title, \"summer (..) \\\\d{2,}\"))\n\nsummer_movies_of_digi\n\n# A tibble: 16 × 5\n   primary_title                         year genres simple_title average_rating\n   &lt;chr&gt;                                &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                 &lt;dbl&gt;\n 1 Summer of '42                         1971 Drama… summer of 42            7.2\n 2 The Elusive Summer of '68             1984 Comed… the elusive…            8.5\n 3 The Cold Summer of 1953               1988 Actio… the cold su…            7.8\n 4 Summer of '69                         1969 Roman… summer of 69            5.8\n 5 Memories of the Olympic Summer of 1…  1954 Docum… memories of…            6  \n 6 A Boy's Summer in 1945                2002 Drama… a boys summ…            7  \n 7 Summer of 85                          2020 Drama… summer of 85            6.9\n 8 Saint Laurent: Summer of '21          2020 Short  saint laure…            6.5\n 9 The Summer of 69                      2009 Comedy the summer …            7.9\n10 Summer of 1941                        2022 Actio… summer of 1…            6  \n11 Elvis: Summer of '56                  2011 Docum… elvis summe…            6.4\n12 Summer of '92                         2015 Biogr… summer of 92            6.8\n13 Summer of 84                          2018 Horro… summer of 84            6.7\n14 Summer of '44                         2017 Drama… summer of 44            5.7\n15 Summer of '67                         2018 Drama… summer of 67            4.9\n16 Shashin Koshien Summer in 0.5 Secon…  2017 Drama  shashin kos…            7.5\n\n\nThis is a table created from a data set that contains movies with the word “Summer” in them. This new table shows if they have the sequence “Summer” plus any two letters (most commonly of or in), plus a sequence of digits if those digits are more than double digits.\n\n# genres and average rating (plot)\n\nmovies_gen_rating &lt;- summer_movies |&gt;\n  mutate(genres = str_split(genres, \",\")) |&gt;\n  mutate(perc_over_5 = str_count(average_rating, \"[5-9]\\\\.\\\\d+\")) |&gt;\n  unnest(genres) |&gt;\n  filter(!is.na(genres)) |&gt;\n  group_by(genres) |&gt;\n  summarize(perc_over_5 = sum(perc_over_5)) |&gt;\n  select(genres, perc_over_5)\n\nggplot(movies_gen_rating, \n       aes(x = genres, y = perc_over_5)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    x = \"Summer Movie Genre\",\n    y = \"Amount of Ratings over 5.0\",\n    title = \"Amount of over 5.0 Ratings per Summer Movie Genre\",\n  )\n\n\n\n\n\n\n\n\nThis is a graph relating genres of movies with “Summer” in the title, and the amount of 5.0+ ratings movies with that genre received. This graph shows that Drama, Comedy, and Romance all got the most ratings over 5.0. Film-Noir, Reality-TV, Talk-Show, and Western got the least ratings over 5.0."
  }
]